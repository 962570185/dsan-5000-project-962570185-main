## Project Proposal:
1. Projectâ€™s objectives


2. Dataset selection
Here I select the clean data for the movie data

3. The tools or libraries
The code will be implemented in Python. The library pandas and numpy will be used to read and process the data. The library scikit-learn will be used to implement the model.

## Code Implementation:

**Read file**
```{python}
import pandas as pd

file_name = '../../data/others/IMDB_Top_250_Movies.csv'
df=pd.read_csv(file_name)  
print(df.shape)
```

```{python}
df.head()
```

**Preprocess the data**
```{python}
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

# genre
mlb = MultiLabelBinarizer()
df_genres = mlb.fit_transform(df['genre'])
df_genres = pd.DataFrame(df_genres, columns=mlb.classes_)
df = df.drop('genre', axis=1).join(df_genres)

df_genres = mlb.fit_transform(df['casts'])
df_genres = pd.DataFrame(df_genres, columns=mlb.classes_)
df = df.drop('casts', axis=1).join(df_genres)

df_genres = mlb.fit_transform(df['writers'])
df_genres = pd.DataFrame(df_genres, columns=mlb.classes_)
df = df.drop('writers', axis=1).join(df_genres)

# name
categorical_columns = ['name', 'certificate', 'directors'] 
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_columns)
    ],
    remainder='passthrough'  
)

df_transformed = preprocessor.fit_transform(df)

columns_transformed = preprocessor.named_transformers_['cat'].get_feature_names_out(categorical_columns)
new_columns = list(columns_transformed) + [col for col in df.columns if col not in categorical_columns]
df_encoded = pd.DataFrame(df_transformed, columns=new_columns)

print(df.head())
```


**Dimensionality Reduction with PCA**
1. Apply PCA to record dataset.
```{python}
from sklearn.decomposition import PCA

pca_original = PCA()
pca_original.fit(X)
```

2. Determine the optimal number of principal components to retain.
```{python}
cumulative_variance = np.cumsum(pca_original.explained_variance_ratio_)
n_components = np.argmax(cumulative_variance >= 0.8) + 1
```

3. Visualize the reduced-dimensional data using PCA.
```{python}
pca = PCA(n_components=n_components)
pca.fit(X)
print(pca.explained_variance_ratio_)
print(pca.singular_values_)

principal_components = pca.fit_transform(X)
df2 = pd.DataFrame(data = principal_components)
df3=pd.concat([df2,df['sentiment']], axis=1)

sns.scatterplot(data=df2, x=0, y=1,hue=df["sentiment"]) 
plt.show()

sns.pairplot(data=df3,hue="sentiment") 
plt.show()
```


**Dimensionality Reduction with t-SNE**
Implement t-SNE on the same dataset.
Explore different perplexity values and their impact.
Visualize the t-SNE output to reveal patterns and clusters.
Compare t-SNE results with PCA results.

Evaluation and Comparison
Evaluate the effectiveness of PCA and t-SNE in terms of preserving data structure and information.
Compare the visualization capabilities of PCA and t-SNE.
Discuss the trade-offs and scenarios where one technique may outperform the other.

## Project Report:
A comprehensive project report detailing the steps taken, results obtained, and your analysis.
Include visualizations, comparisons, and insights gained from the dimensionality reduction techniques.